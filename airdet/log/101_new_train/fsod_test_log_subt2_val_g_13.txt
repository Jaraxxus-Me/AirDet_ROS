Command Line Args: Namespace(config_file='configs/fsod/finetune_R_101_C4_1x_subt2.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './output/fsod/R_101_C4_1x/model_final.pth', 'DATASETS.TEST', "('val_g_13',)"], resume=False)
[32m[11/11 09:20:21 detectron2]: [0mRank of current process: 0. World size: 1
[32m[11/11 09:20:22 detectron2]: [0mEnvironment info:
----------------------  ---------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 19:07:31) [GCC 7.3.0]
numpy                   1.19.2
detectron2              0.2 @/usr/local/miniconda/envs/fewx/lib/python3.6/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.2
detectron2 arch flags   sm_35, sm_37, sm_50, sm_52, sm_60, sm_61, sm_70, sm_75
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.5.1 @/usr/local/miniconda/envs/fewx/lib/python3.6/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0                   NVIDIA TITAN X (Pascal)
CUDA_HOME               /usr/local/cuda
Pillow                  8.3.1
torchvision             0.6.0a0+35d732a @/usr/local/miniconda/envs/fewx/lib/python3.6/site-packages/torchvision
torchvision arch flags  sm_35, sm_50, sm_60, sm_70, sm_75
fvcore                  0.1.5.post20210825
cv2                     4.2.0
----------------------  ---------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_INTERNAL_THREADPOOL_IMPL -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[32m[11/11 09:20:22 detectron2]: [0mCommand line arguments: Namespace(config_file='configs/fsod/finetune_R_101_C4_1x_subt2.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', './output/fsod/R_101_C4_1x/model_final.pth', 'DATASETS.TEST', "('val_g_13',)"], resume=False)
[32m[11/11 09:20:22 detectron2]: [0mContents of args.config_file=configs/fsod/finetune_R_101_C4_1x_subt2.yaml:
_BASE_: "Base-FSOD-C4.yaml"
MODEL:
  WEIGHTS: "./output/fsod/R_50_C4_1x/model_final.pth" 
  MASK_ON: False
  RESNETS:
    DEPTH: 101
    OUT_FEATURES: ["res2", "res3", "res4"]
  BACKBONE:
    FREEZE_AT: 5
DATASETS:
  TRAIN: ("coco_2017_train_voc_10_shot",)
  TEST: ("val_a_0",)
  TESTSHOTS: 2
SOLVER:
  IMS_PER_BATCH: 4
  BASE_LR: 0.0
  STEPS: (2000, 3000)
  MAX_ITER: 3000
  WARMUP_ITERS: 200
INPUT:
  FS:
    FEW_SHOT: True
    SUPPORT_WAY: 2
    SUPPORT_SHOT: 1
  MIN_SIZE_TRAIN: (440, 472, 504, 536, 568, 600)
  MAX_SIZE_TRAIN: 1000
  MIN_SIZE_TEST: 600
  MAX_SIZE_TEST: 1000
OUTPUT_DIR: './output/fsod/test_dir/R_101_C4_1x_subt/2shot'

[32m[11/11 09:20:22 detectron2]: [0mRunning with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 8
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('val_g_13',)
  TESTSHOTS: 2
  TRAIN: ('coco_2017_train_voc_10_shot',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  FS:
    FEW_SHOT: True
    SUPPORT_SHOT: 1
    SUPPORT_WAY: 2
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1000
  MAX_SIZE_TRAIN: 1000
  MIN_SIZE_TEST: 600
  MIN_SIZE_TRAIN: (440, 472, 504, 536, 568, 600)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32, 64, 128, 256, 512]]
  BACKBONE:
    FREEZE_AT: 5
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: 
    OUT_CHANNELS: 256
  HIFT:
    CHANNEL: 256
    DIM_FFN: 512
    HEADS: 4
    LAYERS_DEC: 2
    LAYERS_ENC: 1
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: False
  META_ARCHITECTURE: FsodRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: FsodRPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 101
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: 
    NORM: 
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 128
    IN_FEATURES: ['res2', 'res3', 'res4']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: FsodRes5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 1
    POSITIVE_FRACTION: 0.5
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['res4']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 100
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: ./output/fsod/R_101_C4_1x/model_final.pth
OUTPUT_DIR: ./output/fsod/test_dir/R_101_C4_1x_subt/2shot
SEED: 1
SOLVER:
  BACKBONE_LR_FACTOR: 0.5
  BASE_LR: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 8000
  CHECKPOINT_PERIOD_EVA: 500
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  HEAD_LR_FACTOR: 2.0
  IMS_PER_BATCH: 4
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 3000
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  START_SAVE_ITER: 72000
  STEPS: (2000, 3000)
  WARMUP_FACTOR: 0.1
  WARMUP_ITERS: 200
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
  VIS: True
  VIS_DIR: vis/val_a_0_1shot
  VIS_THRESH: 0.9
VERSION: 2
VIS_PERIOD: 0
[32m[11/11 09:20:22 detectron2]: [0mFull config saved to ./output/fsod/test_dir/R_101_C4_1x_subt/2shot/config.yaml
[32m[11/11 09:20:34 d2.engine.defaults]: [0mModel:
FsodRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
  )
  (proposal_generator): FsodRPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): FsodRes5ROIHeads(
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
        )
      )
    )
    (box_predictor): FsodFastRCNNOutputLayers(
      (locator): LocatorNet(
        (support_fc): Sequential(
          (0): Linear(in_features=49, out_features=2048, bias=True)
          (1): Linear(in_features=2048, out_features=1, bias=True)
        )
        (conv1): Sequential(
          (0): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (mlp): Sequential(
          (0): Linear(in_features=100352, out_features=1024, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=1024, out_features=1024, bias=True)
          (3): ReLU(inplace=True)
        )
        (loc_fc): Linear(in_features=1024, out_features=4, bias=True)
      )
      (conv_1): Conv2d(4096, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (conv_2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
      (conv_3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (cls_score_pr): Linear(in_features=2048, out_features=2, bias=True)
      (conv_cor): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (cls_score_cor): Linear(in_features=2048, out_features=2, bias=True)
      (fc_1): Linear(in_features=4096, out_features=2048, bias=True)
      (fc_2): Linear(in_features=2048, out_features=2048, bias=True)
      (cls_score_fc): Linear(in_features=2048, out_features=2, bias=True)
      (avgpool): AvgPool2d(kernel_size=3, stride=1, padding=0)
      (avgpool_fc): AvgPool2d(kernel_size=7, stride=7, padding=0)
    )
  )
  (fuser): FuseNet(
    (conv1): Sequential(
      (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
      (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(4096, 1024, kernel_size=(1, 1), stride=(1, 1))
      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (dw_conv): Sequential(
      (0): Conv2d(4096, 1024, kernel_size=(1, 1), stride=(1, 1), groups=2)
      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (mlp): Sequential(
      (0): Linear(in_features=1024, out_features=1024, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=1024, out_features=1, bias=True)
      (3): ReLU(inplace=True)
      (4): Softmax(dim=0)
    )
  )
  (apn): APN(
    (r1): Interp(
      (conv): Sequential(
        (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (gconv1): GConv(
      (conv_g): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (conv): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=2)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (r3): Interp(
      (conv): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
)
[32m[11/11 09:20:34 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from ./output/fsod/R_101_C4_1x/model_final.pth ...
[32m[11/11 09:20:36 d2.data.datasets.coco]: [0mLoaded 1175 images in COCO format from datasets/SUBT/use/val_g_13/new_annotations/val_g_13.json
[32m[11/11 09:20:36 d2.data.build]: [0mDistribution of instances among all 10 categories:
[36m|  category   | #instances   |  category  | #instances   |   category    | #instances   |
|:-----------:|:-------------|:----------:|:-------------|:-------------:|:-------------|
|   backpac   | 51           |    rop     | 0            |      ven      | 0            |
|    helme    | 0            |    dril    | 125          | fire exting.. | 12           |
| helmet-ligh | 0            |  survivo   | 994          |   cell phon   | 0            |
|     cub     | 0            |            |              |               |              |
|    total    | 1182         |            |              |               |              |[0m
[32m[11/11 09:20:36 d2.data.common]: [0mSerializing 1175 elements to byte tensors and concatenating them all ...
[32m[11/11 09:20:36 d2.data.common]: [0mSerialized dataset takes 0.28 MiB
[32m[11/11 09:20:36 d2.data.dataset_mapper]: [0mAugmentations used in training: [ResizeShortestEdge(short_edge_length=(600, 600), max_size=1000, sample_style='choice')]
[32m[11/11 09:20:36 d2.evaluation.evaluator]: [0mStart inference on 1175 images
[32m[11/11 09:20:43 d2.evaluation.evaluator]: [0mInference done 11/1175. 0.4649 s / img. ETA=0:10:33
[32m[11/11 09:20:48 d2.evaluation.evaluator]: [0mInference done 20/1175. 0.4944 s / img. ETA=0:11:02
[32m[11/11 09:20:53 d2.evaluation.evaluator]: [0mInference done 29/1175. 0.4924 s / img. ETA=0:10:54
[32m[11/11 09:20:59 d2.evaluation.evaluator]: [0mInference done 39/1175. 0.4851 s / img. ETA=0:10:40
[32m[11/11 09:21:04 d2.evaluation.evaluator]: [0mInference done 48/1175. 0.4927 s / img. ETA=0:10:45
[32m[11/11 09:21:10 d2.evaluation.evaluator]: [0mInference done 57/1175. 0.4993 s / img. ETA=0:10:51
[32m[11/11 09:21:15 d2.evaluation.evaluator]: [0mInference done 66/1175. 0.4967 s / img. ETA=0:10:41
[32m[11/11 09:21:20 d2.evaluation.evaluator]: [0mInference done 72/1175. 0.5020 s / img. ETA=0:11:12
[32m[11/11 09:21:26 d2.evaluation.evaluator]: [0mInference done 78/1175. 0.5041 s / img. ETA=0:11:34
[32m[11/11 09:21:31 d2.evaluation.evaluator]: [0mInference done 84/1175. 0.5074 s / img. ETA=0:11:52
[32m[11/11 09:21:36 d2.evaluation.evaluator]: [0mInference done 90/1175. 0.5111 s / img. ETA=0:12:07
[32m[11/11 09:21:42 d2.evaluation.evaluator]: [0mInference done 96/1175. 0.5121 s / img. ETA=0:12:15
[32m[11/11 09:21:47 d2.evaluation.evaluator]: [0mInference done 102/1175. 0.5139 s / img. ETA=0:12:24
[32m[11/11 09:21:52 d2.evaluation.evaluator]: [0mInference done 108/1175. 0.5159 s / img. ETA=0:12:30
[32m[11/11 09:21:57 d2.evaluation.evaluator]: [0mInference done 114/1175. 0.5172 s / img. ETA=0:12:37
[32m[11/11 09:22:03 d2.evaluation.evaluator]: [0mInference done 120/1175. 0.5173 s / img. ETA=0:12:41
[32m[11/11 09:22:08 d2.evaluation.evaluator]: [0mInference done 126/1175. 0.5171 s / img. ETA=0:12:47
[32m[11/11 09:22:13 d2.evaluation.evaluator]: [0mInference done 132/1175. 0.5184 s / img. ETA=0:12:51
[32m[11/11 09:22:19 d2.evaluation.evaluator]: [0mInference done 138/1175. 0.5185 s / img. ETA=0:12:54
[32m[11/11 09:22:24 d2.evaluation.evaluator]: [0mInference done 144/1175. 0.5222 s / img. ETA=0:12:58
[32m[11/11 09:22:30 d2.evaluation.evaluator]: [0mInference done 150/1175. 0.5224 s / img. ETA=0:13:01
[32m[11/11 09:22:35 d2.evaluation.evaluator]: [0mInference done 156/1175. 0.5226 s / img. ETA=0:13:01
[32m[11/11 09:22:40 d2.evaluation.evaluator]: [0mInference done 162/1175. 0.5227 s / img. ETA=0:12:59
[32m[11/11 09:22:46 d2.evaluation.evaluator]: [0mInference done 168/1175. 0.5236 s / img. ETA=0:12:59
[32m[11/11 09:22:51 d2.evaluation.evaluator]: [0mInference done 174/1175. 0.5236 s / img. ETA=0:12:58
[32m[11/11 09:22:56 d2.evaluation.evaluator]: [0mInference done 180/1175. 0.5247 s / img. ETA=0:12:57
[32m[11/11 09:23:02 d2.evaluation.evaluator]: [0mInference done 189/1175. 0.5239 s / img. ETA=0:12:42
[32m[11/11 09:23:07 d2.evaluation.evaluator]: [0mInference done 198/1175. 0.5217 s / img. ETA=0:12:25
[32m[11/11 09:23:12 d2.evaluation.evaluator]: [0mInference done 208/1175. 0.5187 s / img. ETA=0:12:06
[32m[11/11 09:23:18 d2.evaluation.evaluator]: [0mInference done 217/1175. 0.5192 s / img. ETA=0:11:54
[32m[11/11 09:23:23 d2.evaluation.evaluator]: [0mInference done 226/1175. 0.5175 s / img. ETA=0:11:40
[32m[11/11 09:23:28 d2.evaluation.evaluator]: [0mInference done 235/1175. 0.5161 s / img. ETA=0:11:27
[32m[11/11 09:23:33 d2.evaluation.evaluator]: [0mInference done 243/1175. 0.5168 s / img. ETA=0:11:18
[32m[11/11 09:23:38 d2.evaluation.evaluator]: [0mInference done 252/1175. 0.5154 s / img. ETA=0:11:06
[32m[11/11 09:23:43 d2.evaluation.evaluator]: [0mInference done 262/1175. 0.5130 s / img. ETA=0:10:52
[32m[11/11 09:23:49 d2.evaluation.evaluator]: [0mInference done 272/1175. 0.5119 s / img. ETA=0:10:40
[32m[11/11 09:23:54 d2.evaluation.evaluator]: [0mInference done 281/1175. 0.5114 s / img. ETA=0:10:29
[32m[11/11 09:24:00 d2.evaluation.evaluator]: [0mInference done 291/1175. 0.5108 s / img. ETA=0:10:18
[32m[11/11 09:24:05 d2.evaluation.evaluator]: [0mInference done 300/1175. 0.5100 s / img. ETA=0:10:08
[32m[11/11 09:24:10 d2.evaluation.evaluator]: [0mInference done 309/1175. 0.5091 s / img. ETA=0:09:59
[32m[11/11 09:24:15 d2.evaluation.evaluator]: [0mInference done 317/1175. 0.5101 s / img. ETA=0:09:52
[32m[11/11 09:24:20 d2.evaluation.evaluator]: [0mInference done 326/1175. 0.5094 s / img. ETA=0:09:42
[32m[11/11 09:24:25 d2.evaluation.evaluator]: [0mInference done 335/1175. 0.5086 s / img. ETA=0:09:33
[32m[11/11 09:24:30 d2.evaluation.evaluator]: [0mInference done 344/1175. 0.5092 s / img. ETA=0:09:26
[32m[11/11 09:24:36 d2.evaluation.evaluator]: [0mInference done 353/1175. 0.5098 s / img. ETA=0:09:18
[32m[11/11 09:24:41 d2.evaluation.evaluator]: [0mInference done 362/1175. 0.5092 s / img. ETA=0:09:10
[32m[11/11 09:24:47 d2.evaluation.evaluator]: [0mInference done 372/1175. 0.5083 s / img. ETA=0:09:01
[32m[11/11 09:24:52 d2.evaluation.evaluator]: [0mInference done 381/1175. 0.5077 s / img. ETA=0:08:53
[32m[11/11 09:24:57 d2.evaluation.evaluator]: [0mInference done 391/1175. 0.5064 s / img. ETA=0:08:43
[32m[11/11 09:25:02 d2.evaluation.evaluator]: [0mInference done 400/1175. 0.5057 s / img. ETA=0:08:35
[32m[11/11 09:25:07 d2.evaluation.evaluator]: [0mInference done 409/1175. 0.5052 s / img. ETA=0:08:28
[32m[11/11 09:25:13 d2.evaluation.evaluator]: [0mInference done 418/1175. 0.5056 s / img. ETA=0:08:21
[32m[11/11 09:25:18 d2.evaluation.evaluator]: [0mInference done 427/1175. 0.5053 s / img. ETA=0:08:13
[32m[11/11 09:25:23 d2.evaluation.evaluator]: [0mInference done 436/1175. 0.5056 s / img. ETA=0:08:06
[32m[11/11 09:25:29 d2.evaluation.evaluator]: [0mInference done 445/1175. 0.5062 s / img. ETA=0:08:00
[32m[11/11 09:25:34 d2.evaluation.evaluator]: [0mInference done 454/1175. 0.5071 s / img. ETA=0:07:53
[32m[11/11 09:25:40 d2.evaluation.evaluator]: [0mInference done 463/1175. 0.5082 s / img. ETA=0:07:47
[32m[11/11 09:25:45 d2.evaluation.evaluator]: [0mInference done 471/1175. 0.5093 s / img. ETA=0:07:41
[32m[11/11 09:25:51 d2.evaluation.evaluator]: [0mInference done 480/1175. 0.5103 s / img. ETA=0:07:35
[32m[11/11 09:25:56 d2.evaluation.evaluator]: [0mInference done 488/1175. 0.5113 s / img. ETA=0:07:29
[32m[11/11 09:26:01 d2.evaluation.evaluator]: [0mInference done 496/1175. 0.5124 s / img. ETA=0:07:24
[32m[11/11 09:26:06 d2.evaluation.evaluator]: [0mInference done 504/1175. 0.5138 s / img. ETA=0:07:18
[32m[11/11 09:26:11 d2.evaluation.evaluator]: [0mInference done 513/1175. 0.5144 s / img. ETA=0:07:12
[32m[11/11 09:26:17 d2.evaluation.evaluator]: [0mInference done 521/1175. 0.5155 s / img. ETA=0:07:07
[32m[11/11 09:26:22 d2.evaluation.evaluator]: [0mInference done 529/1175. 0.5168 s / img. ETA=0:07:02
[32m[11/11 09:26:27 d2.evaluation.evaluator]: [0mInference done 537/1175. 0.5176 s / img. ETA=0:06:56
[32m[11/11 09:26:33 d2.evaluation.evaluator]: [0mInference done 546/1175. 0.5183 s / img. ETA=0:06:50
[32m[11/11 09:26:38 d2.evaluation.evaluator]: [0mInference done 554/1175. 0.5191 s / img. ETA=0:06:45
[32m[11/11 09:26:43 d2.evaluation.evaluator]: [0mInference done 562/1175. 0.5201 s / img. ETA=0:06:40
[32m[11/11 09:26:49 d2.evaluation.evaluator]: [0mInference done 571/1175. 0.5205 s / img. ETA=0:06:33
[32m[11/11 09:26:54 d2.evaluation.evaluator]: [0mInference done 580/1175. 0.5204 s / img. ETA=0:06:27
[32m[11/11 09:26:59 d2.evaluation.evaluator]: [0mInference done 588/1175. 0.5214 s / img. ETA=0:06:22
[32m[11/11 09:27:04 d2.evaluation.evaluator]: [0mInference done 596/1175. 0.5221 s / img. ETA=0:06:16
[32m[11/11 09:27:09 d2.evaluation.evaluator]: [0mInference done 604/1175. 0.5227 s / img. ETA=0:06:11
[32m[11/11 09:27:14 d2.evaluation.evaluator]: [0mInference done 612/1175. 0.5234 s / img. ETA=0:06:06
[32m[11/11 09:27:20 d2.evaluation.evaluator]: [0mInference done 621/1175. 0.5236 s / img. ETA=0:06:00
[32m[11/11 09:27:25 d2.evaluation.evaluator]: [0mInference done 630/1175. 0.5240 s / img. ETA=0:05:54
[32m[11/11 09:27:31 d2.evaluation.evaluator]: [0mInference done 639/1175. 0.5247 s / img. ETA=0:05:48
[32m[11/11 09:27:37 d2.evaluation.evaluator]: [0mInference done 648/1175. 0.5254 s / img. ETA=0:05:42
[32m[11/11 09:27:42 d2.evaluation.evaluator]: [0mInference done 656/1175. 0.5259 s / img. ETA=0:05:36
[32m[11/11 09:27:47 d2.evaluation.evaluator]: [0mInference done 664/1175. 0.5267 s / img. ETA=0:05:31
[32m[11/11 09:27:52 d2.evaluation.evaluator]: [0mInference done 672/1175. 0.5272 s / img. ETA=0:05:26
[32m[11/11 09:27:57 d2.evaluation.evaluator]: [0mInference done 680/1175. 0.5276 s / img. ETA=0:05:21
[32m[11/11 09:28:03 d2.evaluation.evaluator]: [0mInference done 688/1175. 0.5282 s / img. ETA=0:05:15
[32m[11/11 09:28:08 d2.evaluation.evaluator]: [0mInference done 697/1175. 0.5285 s / img. ETA=0:05:09
[32m[11/11 09:28:14 d2.evaluation.evaluator]: [0mInference done 706/1175. 0.5290 s / img. ETA=0:05:03
[32m[11/11 09:28:19 d2.evaluation.evaluator]: [0mInference done 714/1175. 0.5295 s / img. ETA=0:04:58
[32m[11/11 09:28:24 d2.evaluation.evaluator]: [0mInference done 722/1175. 0.5303 s / img. ETA=0:04:53
[32m[11/11 09:28:29 d2.evaluation.evaluator]: [0mInference done 730/1175. 0.5307 s / img. ETA=0:04:48
[32m[11/11 09:28:34 d2.evaluation.evaluator]: [0mInference done 738/1175. 0.5313 s / img. ETA=0:04:43
[32m[11/11 09:28:40 d2.evaluation.evaluator]: [0mInference done 746/1175. 0.5318 s / img. ETA=0:04:37
[32m[11/11 09:28:45 d2.evaluation.evaluator]: [0mInference done 755/1175. 0.5320 s / img. ETA=0:04:31
[32m[11/11 09:28:50 d2.evaluation.evaluator]: [0mInference done 763/1175. 0.5326 s / img. ETA=0:04:26
[32m[11/11 09:28:55 d2.evaluation.evaluator]: [0mInference done 771/1175. 0.5331 s / img. ETA=0:04:21
[32m[11/11 09:29:01 d2.evaluation.evaluator]: [0mInference done 779/1175. 0.5336 s / img. ETA=0:04:16
[32m[11/11 09:29:06 d2.evaluation.evaluator]: [0mInference done 788/1175. 0.5340 s / img. ETA=0:04:10
[32m[11/11 09:29:11 d2.evaluation.evaluator]: [0mInference done 796/1175. 0.5345 s / img. ETA=0:04:05
[32m[11/11 09:29:17 d2.evaluation.evaluator]: [0mInference done 804/1175. 0.5348 s / img. ETA=0:04:00
[32m[11/11 09:29:22 d2.evaluation.evaluator]: [0mInference done 812/1175. 0.5354 s / img. ETA=0:03:54
[32m[11/11 09:29:27 d2.evaluation.evaluator]: [0mInference done 821/1175. 0.5356 s / img. ETA=0:03:49
[32m[11/11 09:29:33 d2.evaluation.evaluator]: [0mInference done 830/1175. 0.5357 s / img. ETA=0:03:43
[32m[11/11 09:29:38 d2.evaluation.evaluator]: [0mInference done 838/1175. 0.5360 s / img. ETA=0:03:37
[32m[11/11 09:29:43 d2.evaluation.evaluator]: [0mInference done 846/1175. 0.5365 s / img. ETA=0:03:32
[32m[11/11 09:29:48 d2.evaluation.evaluator]: [0mInference done 854/1175. 0.5370 s / img. ETA=0:03:27
[32m[11/11 09:29:54 d2.evaluation.evaluator]: [0mInference done 863/1175. 0.5372 s / img. ETA=0:03:21
[32m[11/11 09:30:00 d2.evaluation.evaluator]: [0mInference done 872/1175. 0.5372 s / img. ETA=0:03:15
[32m[11/11 09:30:05 d2.evaluation.evaluator]: [0mInference done 880/1175. 0.5375 s / img. ETA=0:03:10
[32m[11/11 09:30:10 d2.evaluation.evaluator]: [0mInference done 888/1175. 0.5378 s / img. ETA=0:03:05
[32m[11/11 09:30:15 d2.evaluation.evaluator]: [0mInference done 896/1175. 0.5381 s / img. ETA=0:03:00
[32m[11/11 09:30:20 d2.evaluation.evaluator]: [0mInference done 904/1175. 0.5387 s / img. ETA=0:02:55
[32m[11/11 09:30:25 d2.evaluation.evaluator]: [0mInference done 912/1175. 0.5390 s / img. ETA=0:02:49
[32m[11/11 09:30:30 d2.evaluation.evaluator]: [0mInference done 920/1175. 0.5393 s / img. ETA=0:02:44
[32m[11/11 09:30:36 d2.evaluation.evaluator]: [0mInference done 928/1175. 0.5399 s / img. ETA=0:02:39
[32m[11/11 09:30:41 d2.evaluation.evaluator]: [0mInference done 936/1175. 0.5402 s / img. ETA=0:02:34
[32m[11/11 09:30:46 d2.evaluation.evaluator]: [0mInference done 944/1175. 0.5404 s / img. ETA=0:02:29
[32m[11/11 09:30:51 d2.evaluation.evaluator]: [0mInference done 952/1175. 0.5407 s / img. ETA=0:02:24
[32m[11/11 09:30:57 d2.evaluation.evaluator]: [0mInference done 961/1175. 0.5409 s / img. ETA=0:02:18
[32m[11/11 09:31:02 d2.evaluation.evaluator]: [0mInference done 970/1175. 0.5410 s / img. ETA=0:02:12
[32m[11/11 09:31:08 d2.evaluation.evaluator]: [0mInference done 978/1175. 0.5412 s / img. ETA=0:02:07
[32m[11/11 09:31:13 d2.evaluation.evaluator]: [0mInference done 986/1175. 0.5413 s / img. ETA=0:02:02
[32m[11/11 09:31:18 d2.evaluation.evaluator]: [0mInference done 994/1175. 0.5415 s / img. ETA=0:01:56
[32m[11/11 09:31:23 d2.evaluation.evaluator]: [0mInference done 1002/1175. 0.5415 s / img. ETA=0:01:51
[32m[11/11 09:31:28 d2.evaluation.evaluator]: [0mInference done 1010/1175. 0.5420 s / img. ETA=0:01:46
[32m[11/11 09:31:33 d2.evaluation.evaluator]: [0mInference done 1018/1175. 0.5422 s / img. ETA=0:01:41
[32m[11/11 09:31:38 d2.evaluation.evaluator]: [0mInference done 1026/1175. 0.5424 s / img. ETA=0:01:36
[32m[11/11 09:31:44 d2.evaluation.evaluator]: [0mInference done 1034/1175. 0.5429 s / img. ETA=0:01:31
[32m[11/11 09:31:49 d2.evaluation.evaluator]: [0mInference done 1042/1175. 0.5431 s / img. ETA=0:01:25
[32m[11/11 09:31:54 d2.evaluation.evaluator]: [0mInference done 1050/1175. 0.5433 s / img. ETA=0:01:20
[32m[11/11 09:31:59 d2.evaluation.evaluator]: [0mInference done 1058/1175. 0.5437 s / img. ETA=0:01:15
[32m[11/11 09:32:05 d2.evaluation.evaluator]: [0mInference done 1067/1175. 0.5439 s / img. ETA=0:01:09
[32m[11/11 09:32:10 d2.evaluation.evaluator]: [0mInference done 1076/1175. 0.5439 s / img. ETA=0:01:03
[32m[11/11 09:32:15 d2.evaluation.evaluator]: [0mInference done 1084/1175. 0.5441 s / img. ETA=0:00:58
[32m[11/11 09:32:20 d2.evaluation.evaluator]: [0mInference done 1092/1175. 0.5443 s / img. ETA=0:00:53
[32m[11/11 09:32:26 d2.evaluation.evaluator]: [0mInference done 1101/1175. 0.5441 s / img. ETA=0:00:47
[32m[11/11 09:32:31 d2.evaluation.evaluator]: [0mInference done 1109/1175. 0.5442 s / img. ETA=0:00:42
[32m[11/11 09:32:36 d2.evaluation.evaluator]: [0mInference done 1117/1175. 0.5444 s / img. ETA=0:00:37
[32m[11/11 09:32:41 d2.evaluation.evaluator]: [0mInference done 1125/1175. 0.5447 s / img. ETA=0:00:32
[32m[11/11 09:32:46 d2.evaluation.evaluator]: [0mInference done 1133/1175. 0.5449 s / img. ETA=0:00:27
[32m[11/11 09:32:52 d2.evaluation.evaluator]: [0mInference done 1142/1175. 0.5450 s / img. ETA=0:00:21
[32m[11/11 09:32:57 d2.evaluation.evaluator]: [0mInference done 1151/1175. 0.5451 s / img. ETA=0:00:15
[32m[11/11 09:33:03 d2.evaluation.evaluator]: [0mInference done 1160/1175. 0.5450 s / img. ETA=0:00:09
[32m[11/11 09:33:08 d2.evaluation.evaluator]: [0mInference done 1168/1175. 0.5451 s / img. ETA=0:00:04
[32m[11/11 09:33:12 d2.evaluation.evaluator]: [0mTotal inference time: 0:12:32.727056 (0.643356 s / img per device, on 1 devices)
[32m[11/11 09:33:12 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:10:37 (0.545192 s / img per device, on 1 devices)
[32m[11/11 09:33:12 fewx.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[11/11 09:33:12 fewx.evaluation.coco_evaluation]: [0mSaving results to ./output/fsod/test_dir/R_101_C4_1x_subt/2shot/inference/coco_instances_results.json
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluating predictions ...
Loading and preparing results...
DONE (t=0.13s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
COCOeval_opt.evaluate() finished in 0.50 seconds.
Accumulating evaluation results...
COCOeval_opt.accumulate() finished in 0.11 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.078
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.193
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.033
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.066
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.084
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.105
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.170
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.320
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.321
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.100
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.240
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.466
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl   |
|:-----:|:------:|:------:|:-----:|:-----:|:------:|
| 7.766 | 19.268 | 3.294  | 6.625 | 8.429 | 10.463 |
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for VOC 20 categories =======> AP  : 0.00
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for VOC 20 categories =======> AP50: 0.00
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for VOC 20 categories =======> AP75: 0.00
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for VOC 20 categories =======> APs : 0.00
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for VOC 20 categories =======> APm : 0.00
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for VOC 20 categories =======> APl : 0.00
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for Non VOC 60 categories =======> AP  : nan
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for Non VOC 60 categories =======> AP50: nan
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for Non VOC 60 categories =======> AP75: nan
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for Non VOC 60 categories =======> APs : nan
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for Non VOC 60 categories =======> APm : nan
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mEvaluation results for Non VOC 60 categories =======> APl : nan
[32m[11/11 09:33:13 fewx.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category    | AP    | category   | AP    | category         | AP     |
|:------------|:------|:-----------|:------|:-----------------|:-------|
| backpac     | 7.431 | rop        | nan   | ven              | nan    |
| helme       | nan   | dril       | 8.014 | fire extinguishe | 10.666 |
| helmet-ligh | nan   | survivo    | 4.954 | cell phon        | nan    |
| cub         | nan   |            |       |                  |        |
[32m[11/11 09:33:13 d2.engine.defaults]: [0mEvaluation results for val_g_13 in csv format:
[32m[11/11 09:33:13 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[11/11 09:33:13 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[11/11 09:33:13 d2.evaluation.testing]: [0mcopypaste: 7.7663,19.2682,3.2943,6.6247,8.4287,10.4630
/usr/local/miniconda/envs/fewx/lib/python3.6/site-packages/torch/nn/functional.py:2973: UserWarning: Default upsampling behavior when mode=bicubic is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode))
